kafka:
  sedSendt:
    topic: ${KAFKA_SEDSENDT_TOPIC}
    groupid: eessi-pensjon-begrens-innsyn-group
  sedMottatt:
    topic: ${KAFKA_SEDMOTTATT_TOPIC}
    groupid: eessi-pensjon-begrens-innsyn-group

METRICS_REQUESTFILTER_ENABLE: false

no.nav.security.jwt:
  client:
    registration:
      eux-credentials:
        token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
        grant-type: client_credentials
        scope: api://${AZURE_APP_EUX_CLIENT_ID}/.default
        authentication:
          client-id: ${AZURE_APP_CLIENT_ID}
          client-jwk: ${AZURE_APP_JWK}
          client-auth-method: private_key_jwt
      pdl-credentials:
        token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
        grant-type: client_credentials
        scope: api://${AZURE_APP_PDL_CLIENT_ID}/.default
        authentication:
          client-id: ${AZURE_APP_CLIENT_ID}
          client-jwk: ${AZURE_APP_JWK}
          client-auth-method: private_key_jwt

#Spring
spring:
  kafka:
    listener:
      ack-mode: manual
      missingTopicsFatal: true  # app will not start if topics don't exist
    consumer:
      enable-auto-commit: false
      max-poll-records: 1
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS_URL}
    properties:
      security.protocol: SASL_SSL
      key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value.deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      sasl:
        mechanism: PLAIN
        jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username="${srvusername}" password="${srvpassword}";

securityTokenService:
  discoveryUrl: ${SECURITY_TOKEN_SERVICE_OPENID_CONFIGURATION_URL}

#Metrics
management:
  endpoints:
    metrics:
      enabled: true
    web:
      exposure:
        include: info, health, metrics, prometheus
    export:
      prometheus:
        enabled: true
    prometheus:
      enabled: true
  metrics:
    web:
      server:
        request:
          autotime:
            enabled: false