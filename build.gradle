buildscript {

	ext {
		kotlinVersion = '1.6.20'
		springBootVersion = '2.6.6'
		oidcTokenSupportVersion = '2.0.14'
		oidcTokenSupportTestVersion = '2.0.5'
		logstashLogbackVersion = '7.1'
		pensjonInformasjonVersion = '9.4.10'
		mockserverVersion = '5.13.2'
		junitVersion = '5.8.2'
		archUnitVersion = '0.23.1'
		epeuxVersion = '1.1.65'
		epMetricsVersion = "0.4.17"
		epLoggingVersion = "1.0.17"
		epPersonoppslagVersion = "9.0.11"
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
		classpath("gradle.plugin.org.openrepose:gradle-jaxb-plugin:2.5.0")
	}
}

plugins {
	id 'com.github.ben-manes.versions' version '0.42.0'
	id 'se.patrikerdes.use-latest-versions' version '0.2.18'
	id "org.owasp.dependencycheck" version "7.0.4.1"
	id 'com.adarshr.test-logger' version '3.2.0'
	id 'com.cosminpolifronie.gradle.plantuml' version '1.6.0'
	id "org.sonarqube" version "3.3"
	id 'jacoco'
}

assert JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_17): "Java 17 or newer is required"

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.openrepose.gradle.plugins.jaxb'

group = 'no.nav.eessi.pensjon'
version = '0.0.1'

dependencies {

	// Spring-boot
	implementation("org.springframework.boot:spring-boot-starter-aop:${springBootVersion}")
	implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")

	implementation("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
	implementation("org.springframework.boot:spring-boot-actuator:${springBootVersion}")

	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.13.2'
	implementation 'org.jetbrains.kotlin:kotlin-reflect:1.6.20'
	implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.6.20'
	implementation 'org.springframework.kafka:spring-kafka'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude module: 'junit'
		exclude module: "mockito-core"
		exclude module: "junit-vintage-engine"
	}
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	// Denne fikser en transient breaking change i embedded kafka
	//testImplementation("org.scala-lang:scala-library:2.12.11")

	//mock - test
	testImplementation("org.junit.jupiter:junit-jupiter:${junitVersion}")
	testImplementation("org.junit.jupiter:junit-jupiter-params:${junitVersion}")
	testImplementation("org.mock-server:mockserver-netty:${mockserverVersion}") {
		exclude module: 'junit'
	}
	testImplementation("org.mock-server:mockserver-client-java:${mockserverVersion}")
	testImplementation "io.mockk:mockk:1.12.3"

	// Architecture tests
	testImplementation("com.tngtech.archunit:archunit:${archUnitVersion}")
	testImplementation("com.tngtech.archunit:archunit-junit5:${archUnitVersion}")
	implementation("com.squareup.okhttp3:mockwebserver:4.9.3")

	// Micrometer
	implementation("io.micrometer:micrometer-registry-prometheus:1.8.4")
	implementation("no.nav.eessi.pensjon:ep-metrics:$epMetricsVersion")

	// Personoppslag
	implementation("no.nav.eessi.pensjon:ep-personoppslag:$epPersonoppslagVersion")

	// Rina Eux API
	implementation("no.nav.eessi.pensjon:ep-eux:${epeuxVersion}") {
		exclude module: 'ep-security-sts'
	}

	// Logging
	implementation("net.logstash.logback:logstash-logback-encoder:${logstashLogbackVersion}")
	configurations { all*.exclude group: 'commons-logging', module: 'commons-logging' }
	implementation group: 'org.slf4j', name: 'jcl-over-slf4j'
	implementation("no.nav.eessi.pensjon:ep-logging:$epLoggingVersion")

	//Auth
	implementation("no.nav.security:token-client-spring:${oidcTokenSupportVersion}")
	implementation("no.nav.security:token-validation-spring:${oidcTokenSupportVersion}")
	implementation("no.nav.security:token-validation-jaxrs:${oidcTokenSupportVersion}")
	implementation("no.nav.security:token-validation-test-support:${oidcTokenSupportTestVersion}")

}

test {
	useJUnitPlatform()
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}
compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "17"
	}
}

compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ['-Xjsr305=strict']
		jvmTarget = '17'
	}
}

// https://docs.gradle.org/current/userguide/jacoco_plugin.html
jacoco {
	toolVersion = "0.8.8"
}

jacocoTestReport {
	reports {
		xml.enabled true
	}
}

tasks.sonarqube.dependsOn tasks["jacocoTestReport"]

repositories {
	mavenCentral()

	String token = System.getenv("GITHUB_TOKEN") ?: project.findProperty("gpr.key")
	if (!token) throw new NullPointerException("Missing token, you have to set GITHUB_TOKEN or gpr.key, see README")

	maven {
		url = uri("https://maven.pkg.github.com/navikt/maven-release")
		credentials {
			username = "token"
			password = token
		}
	}
}

wrapper {
	distributionType = Wrapper.DistributionType.ALL
}

/* https://github.com/ben-manes/gradle-versions-plugin */
dependencyUpdates {
	rejectVersionIf {
		['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'pr']
				.any { qualifier -> it.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/}
	}
	revision = 'release'
}
